{"version":3,"sources":["../../src/utills/services.js"],"names":["createLinearCoordinatesGenerator","isPointIsInsideCircle","defined","isEmptyObject","getDistanceBetweenPoints","velocity","origin","forever","currentPosition","i","longitude","latitude","height","pointX","pointY","circleCenterX","circleCenterY","circleRadius","xDistance","yDistance","distanceBetweenPoints","Math","sqrt","object","undefined","obj","length","constructor","Object","point1","point2","φ1","φ2","Δφ","Δλ","R","a","sin","cos","c","atan2","d"],"mappings":";;;;;;;;;;;;;;QAAgBA,gC,GAAAA,gC;QAwBAC,qB,GAAAA,qB;QAQAC,O,GAAAA,O;QAQAC,a,GAAAA,a;QAIAC,wB,GAAAA,wB;;;;AA5CT,SAASJ,gCAAT,CAA2CK,QAA3C,EAAqD;AACxD,oCAAO,iBAAYC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,+BADD,GACW,IADX;;AAAA;AAAA,6BAEIA,OAFJ;AAAA;AAAA;AAAA;;AAGKC,uCAHL,GAGuBF,MAHvB;AAIUG,yBAJV,GAIc,CAJd;;AAAA;AAAA,8BAIiBA,IAAI,EAJrB;AAAA;AAAA;AAAA;;AAKKD,wCAAgBE,SAAhB,IAA6BL,SAASK,SAAtC;AACAF,wCAAgBG,QAAhB,IAA4BN,SAASM,QAArC;AACAH,wCAAgBI,MAAhB,IAA0BP,SAASO,MAAnC;;AAPL;AAAA,+BASWJ,eATX;;AAAA;AAIyBC,2BAJzB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAaH;;AAED;;;;;;;;AAQO,SAASR,qBAAT,CAA+BY,MAA/B,EAAuCC,MAAvC,EAA+CC,aAA/C,EAA8DC,aAA9D,EAA6EC,YAA7E,EAA2F;AAC9F,QAAMC,YAAYL,SAASE,aAA3B;AAAA,QACII,YAAYL,SAASE,aADzB;AAAA,QACwC;AACpCI,4BAAwBC,KAAKC,IAAL,CAAYJ,YAAYA,SAAb,GAA2BC,YAAYA,SAAlD,CAF5B;;AAII,WAAOC,wBAAwBH,YAA/B;AACP;;AAEM,SAASf,OAAT,CAAiBqB,MAAjB,EAAyB;AAC5B,WAAQA,WAAWC,SAAX,IAAwBD,WAAW,IAA3C;AACH;;AAGD;;;AAGO,SAASpB,aAAT,CAAuBsB,GAAvB,EAA4B;AAC/B,WAAO,aAAYA,GAAZ,EAAiBC,MAAjB,KAA4B,CAA5B,IAAiCD,IAAIE,WAAJ,KAAoBC,MAA5D;AACH;;AAEM,SAASxB,wBAAT,CAAkCyB,MAAlC,EAA0CC,MAA1C,EAAkD;AACrD;AACA;AACA;AACA;;AAEA,QAAMC,KAAKF,OAAOlB,QAAlB;AACA,QAAMqB,KAAKF,OAAOnB,QAAlB;AACA,QAAMsB,KAAKH,OAAOnB,QAAP,GAAkBkB,OAAOlB,QAApC;AACA,QAAMuB,KAAKJ,OAAOpB,SAAP,GAAmBmB,OAAOnB,SAArC;AACA,QAAMyB,IAAI,MAAV,CAVqD,CAUnC;;;AAGlB,QAAMC,IAAIf,KAAKgB,GAAL,CAASJ,KAAG,CAAZ,IAAiBZ,KAAKgB,GAAL,CAASJ,KAAG,CAAZ,CAAjB,GACFZ,KAAKiB,GAAL,CAASP,EAAT,IAAeV,KAAKiB,GAAL,CAASN,EAAT,CAAf,GACAX,KAAKgB,GAAL,CAASH,KAAG,CAAZ,CADA,GACiBb,KAAKgB,GAAL,CAASH,KAAG,CAAZ,CAFzB;AAGA,QAAMK,IAAI,IAAIlB,KAAKmB,KAAL,CAAWnB,KAAKC,IAAL,CAAUc,CAAV,CAAX,EAAyBf,KAAKC,IAAL,CAAU,IAAEc,CAAZ,CAAzB,CAAd;;AAEA,QAAMK,IAAIN,IAAII,CAAd;;AAEA,WAAOE,CAAP;AACH","file":"services.js","sourcesContent":["export function createLinearCoordinatesGenerator (velocity) {\r\n    return function * (origin) {\r\n        let forever = true;\r\n        while (forever) {\r\n            let currentPosition = origin;\r\n            for (let i = 0; i < 32; i++) {\r\n                currentPosition.longitude += velocity.longitude;\r\n                currentPosition.latitude += velocity.latitude;\r\n                currentPosition.height += velocity.height;\r\n              \r\n                yield currentPosition;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * check if a given point is in circle\r\n * @param {Number} pointX  \r\n * @param {Number} pointY \r\n * @param {Number} circleCenterX \r\n * @param {Number} circleCenterY \r\n * @param {Number} circleRadius \r\n */\r\nexport function isPointIsInsideCircle(pointX, pointY, circleCenterX, circleCenterY, circleRadius) {\r\n    const xDistance = pointX - circleCenterX,\r\n        yDistance = pointY - circleCenterY, // simply calculate d = √[(xp−xc)2+(yp−yc)2]\r\n        distanceBetweenPoints = Math.sqrt( (xDistance * xDistance) + (yDistance * yDistance) );\r\n\r\n        return distanceBetweenPoints < circleRadius;\r\n}\r\n\r\nexport function defined(object) {\r\n    return (object !== undefined && object !== null);\r\n}\r\n\r\n\r\n/**\r\n * @param {Object} obj\r\n */\r\nexport function isEmptyObject(obj) {\r\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\r\n}\r\n\r\nexport function getDistanceBetweenPoints(point1, point2) {\r\n    // const φ1 = lat1.toRadians();\r\n    // const φ2 = lat2.toRadians();\r\n    // const Δφ = (lat2-lat1).toRadians();\r\n    // const Δλ = (lon2-lon1).toRadians();\r\n\r\n    const φ1 = point1.latitude;\r\n    const φ2 = point2.latitude;\r\n    const Δφ = point2.latitude - point1.latitude;\r\n    const Δλ = point2.longitude - point1.longitude;\r\n    const R = 6371e3; // metres\r\n\r\n\r\n    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\r\n            Math.cos(φ1) * Math.cos(φ2) *\r\n            Math.sin(Δλ/2) * Math.sin(Δλ/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n\r\n    const d = R * c;\r\n\r\n    return d;    \r\n}\r\n"]}