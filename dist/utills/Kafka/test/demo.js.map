{"version":3,"sources":["../../../../src/utills/Kafka/test/demo.js"],"names":["avro","require","AvroSerializer","specificSchema","parse","specificSerializer","ProducerFacade","producerPromise","ConsumerFacade","options","groupId","fetchMaxWaitMs","fetchMaxBytes","consumer","sig","timestamp","Date","getTime","frequency","center_longitude","parseInt","Math","random","toFixed","center_latitude","center_altitude","half_axis_long","location_quality","reliable","console","log","cb","msg","subscribe","setTimeout","close","process","exit","then","setInterval","producer","send","catch","err"],"mappings":"AAAA;;AACA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AAAA,IACIC,iBAAiBD,QAAQ,mBAAR,CADrB;AAAA,IAGIE,iBAAiBH,KAAKI,KAAL,CAAW,yBAAX,CAHrB;AAAA,IAIIC,qBAAqB,IAAIH,cAAJ,CAAmBC,cAAnB,CAJzB;AAAA,IAMIG,iBAAiBL,QAAQ,mBAAR,CANrB;AAAA,IAOIM,kBAAkB,IAAID,cAAJ,CAAmB,gBAAnB,EAAqCD,kBAArC,CAPtB;AAAA,IASIG,iBAAiBP,QAAQ,mBAAR,CATrB;AAAA,IAUIQ,UAAU;AACNC,aAAS,aADH;AAENC,oBAAgB,IAFV;AAGNC,mBAAe,OAAO;AAHhB,CAVd;AAAA,IAeIC,WAAW,IAAIL,cAAJ,CAAmB,gBAAnB,EAAqC,eAArC,EAAsDC,OAAtD,EAA+DJ,kBAA/D,CAff;AAgBA;;;AAGA;;;;;;;AAOA,IAAIS,MAAM;AACNC,eAAY,IAAIC,IAAJ,EAAD,CAAWC,OAAX,EADL;AAENC,eAAW,GAFL;AAGNC,sBAAkBC,SAAS,CAACC,KAAKC,MAAL,KAAgB,GAAjB,EAAsBC,OAAtB,CAA8B,CAA9B,CAAT,CAHZ;AAINC,qBAAiBJ,SAAS,CAACC,KAAKC,MAAL,KAAgB,GAAjB,EAAsBC,OAAtB,CAA8B,CAA9B,CAAT,CAJX;AAKNE,qBAAiBL,SAAS,CAACC,KAAKC,MAAL,KAAgB,GAAjB,EAAsBC,OAAtB,CAA8B,CAA9B,CAAT,CALX;AAMNG,oBAAgB,GANV;AAONC,sBAAkB,QAPZ;AAQNC,cAAU;AARJ,CAAV;;AAWAC,QAAQC,GAAR,CAAYhB,GAAZ;;AAEA,IAAIiB,KAAK,SAALA,EAAK;AAAA,WAAOF,QAAQC,GAAR,CAAYE,GAAZ,CAAP;AAAA,CAAT;AACAnB,SAASoB,SAAT,CAAmBF,EAAnB,EAAuBA,EAAvB;AACAG,WAAW;AAAA,WAAMrB,SAASsB,KAAT,CAAe;AAAA,eAAMC,QAAQC,IAAR,EAAN;AAAA,KAAf,CAAN;AAAA,CAAX,EAAuD,IAAI,EAAJ,GAAS,IAAhE;;AAEA9B,gBAAgB+B,IAAhB,CAAqB;AAAA,WACjBC,YAAY;AAAA,eAAMC,SAASC,IAAT,CAAc,eAAd,EAA+B3B,GAA/B,EACb4B,KADa,CACP;AAAA,mBAAO,YAAYb,QAAQC,GAAR,CAAYa,GAAZ,CAAnB;AAAA,SADO,CAAN;AAAA,KAAZ,EACiD,IADjD,CADiB;AAAA,CAArB","file":"demo.js","sourcesContent":["'use strict';\r\nvar avro = require('avsc'),\r\n    AvroSerializer = require('../avroSerializer'),\r\n\r\n    specificSchema = avro.parse('./test/avsc/sigint.avsc'),\r\n    specificSerializer = new AvroSerializer(specificSchema),\r\n\r\n    ProducerFacade = require('../producerFacade'),\r\n    producerPromise = new ProducerFacade('127.0.0.1:2181', specificSerializer),\r\n\r\n    ConsumerFacade = require('../consumerFacade'),\r\n    options = {\r\n        groupId: 'nodeGroupId',\r\n        fetchMaxWaitMs: 1000,\r\n        fetchMaxBytes: 1024 * 1024\r\n    },\r\n    consumer = new ConsumerFacade('127.0.0.1:2181', 'NodeDemoTopic', options, specificSerializer);\r\n//UUID = require('../uuid');\r\n\r\n\r\n/*var msg = {\r\n payload: specificSerializer.serialize({body: 'Hello there!'}),\r\n correlation_key: UUID.randomUUID(),\r\n reply_topic: 'DUMMY_TOPIC',\r\n exception: 'none'\r\n };*/\r\n\r\nlet sig = {\r\n    timestamp: (new Date).getTime(),\r\n    frequency: 200,\r\n    center_longitude: parseInt((Math.random() * 100).toFixed(2)),\r\n    center_latitude: parseInt((Math.random() * 100).toFixed(2)),\r\n    center_altitude: parseInt((Math.random() * 100).toFixed(2)),\r\n    half_axis_long: 200,\r\n    location_quality: 'DDOP_1',\r\n    reliable: true\r\n}\r\n\r\nconsole.log(sig);\r\n\r\nvar cb = msg => console.log(msg);\r\nconsumer.subscribe(cb, cb);\r\nsetTimeout(() => consumer.close(() => process.exit()), 1 * 20 * 1000);\r\n\r\nproducerPromise.then(producer =>\r\n    setInterval(() => producer.send('NodeDemoTopic', sig)\r\n        .catch(err => 'error: ' + console.log(err)), 1000));\r\n\r\n\r\n\r\n"]}