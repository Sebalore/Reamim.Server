{"version":3,"sources":["../../../../src/utills/Kafka/test/history.js"],"names":["historyReq","header","messageCounter","timetag","Date","getTime","schemaName","schemaVersion","layerName","filter","geoFilter","lastNEntries","timeFilter","avro","require","AvroSerializer","RequestResponseProducer","requestSchema","parse","serializer","responseSchema","deserializer","options","groupId","fetchMaxWaitMs","fetchMaxBytes","producerPromise","then","setInterval","producer","send","iter","p","console","log","m","catch","err"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,aAAa;AACfC,YAAQ;AACJC,wBAAgB,CADZ;AAEJC,iBAAS,IAAIC,IAAJ,GAAWC,OAAX,EAFL;AAGJC,oBAAY,wBAHR;AAIJC,uBAAe;AAJX,KADO;AAOfC,eAAW,OAPI;AAQfC,YAAQ;AACJC,mBAAW,IADP;AAEJC,sBAAc,EAFV;AAGJC,oBAAY;AAHR;AARO,CAAnB;;AAeA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;AAAA,IACIC,iBAAiBD,QAAQ,qBAAR,CADrB;AAAA,IAEIE,0BAA0BF,QAAQ,gCAAR,CAF9B;AAAA,IAIIG,gBAAgBJ,KAAKK,KAAL,CAAW,2CAAX,CAJpB;AAAA,IAKIC,aAAa,IAAIJ,cAAJ,CAAmBE,aAAnB,CALjB;AAAA,IAOIG,iBAAiBP,KAAKK,KAAL,CAAW,+BAAX,CAPrB;AAAA,IAQIG,eAAe,IAAIN,cAAJ,CAAmBK,cAAnB,CARnB;AAAA,IAUIE,UAAU;AACNC,aAAS,mBADH;AAENC,oBAAgB,IAFV;AAGNC,mBAAe,OAAO;AAHhB,CAVd;AAAA,IAeIC,kBAAkB,IAAIV,uBAAJ,CAA4B,oBAA5B,EAAkDG,UAAlD,EAA8DE,YAA9D,EAA4EC,OAA5E,EAAqF,iBAArF,CAftB;;AAiBAI,gBAAgBC,IAAhB,CAAqB;AAAA,WACjBC,YAAY,YAAM;AACdC,iBAASC,IAAT,CAAc,wBAAd,EAAwC9B,UAAxC,EACK2B,IADL,CACU,gBAAQ;AAAA;AAAA;AAAA;;AAAA;AACV,kDAAcI,IAAd,4GAAoB;AAAA,wBAAXC,CAAW;;AAChBA,sBAAEL,IAAF,CAAO;AAAA,+BAAKM,QAAQC,GAAR,CAAYC,CAAZ,CAAL;AAAA,qBAAP;AACH;AAHS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIb,SALL,EAMKC,KANL,CAMW;AAAA,mBAAOH,QAAQC,GAAR,CAAYG,GAAZ,CAAP;AAAA,SANX;AAOH,KARD,EAQG,IARH,CADiB;AAAA,CAArB","file":"history.js","sourcesContent":["'use strict';\r\n\r\nconst historyReq = {\r\n    header: {\r\n        messageCounter: 1,\r\n        timetag: new Date().getTime(),\r\n        schemaName: \"GetHistoryRequestTopic\",\r\n        schemaVersion:\t'1.3.0'\r\n    },\r\n    layerName: \"Flock\",\r\n    filter: {\r\n        geoFilter: null,\r\n        lastNEntries: 10,\r\n        timeFilter: null\r\n    }\r\n};\r\n\r\nvar avro = require('avsc'),\r\n    AvroSerializer = require('./../avroSerializer'),\r\n    RequestResponseProducer = require('./../request_response/producer'),\r\n\r\n    requestSchema = avro.parse('./test/avsc/GetHistoryRequestMessage.avsc'),\r\n    serializer = new AvroSerializer(requestSchema),\r\n\r\n    responseSchema = avro.parse('./test/avsc/FlockMessage.avsc'),\r\n    deserializer = new AvroSerializer(responseSchema),\r\n\r\n    options = {\r\n        groupId: 'REPLY_FLOCK_GROUP',\r\n        fetchMaxWaitMs: 1000,\r\n        fetchMaxBytes: 1024 * 1024\r\n    },\r\n    producerPromise = new RequestResponseProducer('10.135.192.33:2181', serializer, deserializer, options, 'ReplyFlockTopic');\r\n\r\nproducerPromise.then(producer =>\r\n    setInterval(() => {\r\n        producer.send('GetHistoryRequestTopic', historyReq)\r\n            .then(iter => {\r\n                for (let p of iter) {\r\n                    p.then(m => console.log(m));\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, 3000));\r\n"]}