{"version":3,"sources":["../../../../src/utills/Kafka/test/UAVPositionTest.js"],"names":["avro","AvroSerializer","ProducerFacade","ConsumerFacade","resources","avscSchema$","specificSchema","parse","specificSerializer","producerPromise","options","groupId","fetchMaxWaitMs","fetchMaxBytes","consumer","testUAV","id","label","ENTITY_TYPE_NAMES","HELICOPTER","position","longitude","MAP_CENTER","latitude","height","velocity","UAVData","timestamp","Date","getTime","type","UAVPositionTest","onMessage","onError","console","log","msg","subscribe","setTimeout","close","process","exit","then","setInterval","producer","send","catch","err"],"mappings":"AAAA;;;;;;;;;;;;;;AACA;;IAAOA,I;;AACP;;IAAOC,c;;AACP;;IAAOC,c;;AACP;;IAAOC,c;;AAEP;;IAAOC,S;;;;AAEP,IACIC,ohBADJ;AAAA,IAcIC,iBAAiBN,KAAKO,KAAL,CAAWF,WAAX,CAdrB;AAAA,IAeIG,qBAAqB,IAAIP,cAAJ,CAAmBK,cAAnB,CAfzB;AAAA,IAgBIG,kBAAkB,IAAIP,cAAJ,CAAmB,gBAAnB,EAAqCM,kBAArC,CAhBtB;AAAA,IAiBIE,UAAU;AACNC,aAAS,aADH;AAENC,oBAAgB,IAFV;AAGNC,mBAAe,OAAO;AAHhB,CAjBd;AAAA,IAsBIC,WAAW,IAAIX,cAAJ,CAAmB,gBAAnB,EAAqC,kBAArC,EAAyDO,OAAzD,EAAkEF,kBAAlE,CAtBf;AAAA,IAwBIO,UAAa;AACPC,QAAI,UADG;AAEPC,WAAUb,UAAUc,iBAAV,CAA4BC,UAAtC,UAFO;AAGPC,cAAU;AACRC,mBAAWjB,UAAUkB,UAAV,CAAqBD,SADxB;AAERE,kBAAUnB,UAAUkB,UAAV,CAAqBC,QAFvB;AAGRC,gBAAQ;AAHA,KAHH;AAQPC,cAAW;AACTJ,mBAAW,CAAC,MADH;AAETE,kBAAU,KAFD;AAGTC,gBAAQ;AAHC;AARJ,CAxBjB;AAHA;;;AA0CA,IAAIE,UAAU;AACVC,eAAY,IAAIC,IAAJ,EAAD,CAAWC,OAAX,EADD;AAEVb,QAAID,QAAQC,EAFF;AAGVc,UAAM1B,UAAUc,iBAAV,CAA4BC,UAHxB;AAIVE,eAAWN,QAAQK,QAAR,CAAiBC,SAJlB;AAKVE,cAAUR,QAAQK,QAAR,CAAiBG,QALjB;AAMVC,YAAQT,QAAQK,QAAR,CAAiBI;AANf,CAAd;;IASqBO,e;;;;;;;kCAENC,S,EAAWC,O,EAAS;AAC3BC,oBAAQC,GAAR,CAAYT,OAAZ;AACA,gBAAIM,YAAYA,aAAc;AAAA,uBAAOE,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,aAA9B;AAAA,gBACAH,UAAUA,WAAY;AAAA,uBAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,aADtB;;AAGAtB,qBAASuB,SAAT,CAAmBL,SAAnB,EAA8BC,OAA9B;AACAK,uBAAW;AAAA,uBAAMxB,SAASyB,KAAT,CAAe;AAAA,2BAAMC,QAAQC,IAAR,EAAN;AAAA,iBAAf,CAAN;AAAA,aAAX,EAAuD,IAAI,EAAJ,GAAS,IAAhE;AACH;;;gCAEO;AACJhC,4BAAgBiC,IAAhB,CAAqB;AAAA,uBACrBC,YAAY,YAAM;AACdjB,4BAAQL,SAAR,IAAqBN,QAAQU,QAAR,CAAiBJ,SAAtC;AACAK,4BAAQH,QAAR,IAAoBR,QAAQU,QAAR,CAAiBF,QAArC;AACAG,4BAAQF,MAAR,IAAkBT,QAAQU,QAAR,CAAiBD,MAAnC;AACAoB,6BAASC,IAAT,CAAc,kBAAd,EAAkCnB,OAAlC,EAA2CoB,KAA3C,CAAiD;AAAA,+BAAO,YAAYZ,QAAQC,GAAR,CAAYY,GAAZ,CAAnB;AAAA,qBAAjD;AACH,iBALD,EAKG,IALH,CADqB;AAAA,aAArB;AAOH;;;;;;kBAnBgBhB,e;AAoBpB","file":"UAVPositionTest.js","sourcesContent":["'use strict';\r\nimport avro from 'avsc';\r\nimport AvroSerializer  from '../avroSerializer';\r\nimport ProducerFacade from '../producerFacade';\r\nimport ConsumerFacade from '../consumerFacade';\r\n// import UUID from '../uuid';\r\nimport resources from '../../../data/resources';\r\n\r\nconst \r\n    avscSchema$ =`{\r\n        \"namespace\": \"com.r39.avro\",\r\n        \"name\": \"UAVPosition\",\r\n        \"type\": \"record\",\r\n        \"fields\": [\r\n            { \"name\": \"timestamp\", \"type\": \"long\" },\r\n            { \"name\": \"id\", \"type\": \"string\", \"doc\": \"ID of UAV , tail serial number.\" },\r\n            { \"name\": \"type\", \"type\": \"string\", \"doc\": \"UAV type.\" },\r\n            { \"name\": \"longitude\", \"type\": \"double\" },\r\n            { \"name\": \"latitude\", \"type\": \"double\" },\r\n            { \"name\": \"height\", \"type\": \"double\" }\r\n        ]\r\n    }`,\r\n    specificSchema = avro.parse(avscSchema$),\r\n    specificSerializer = new AvroSerializer(specificSchema),\r\n    producerPromise = new ProducerFacade('127.0.0.1:2181', specificSerializer),\r\n    options = {\r\n        groupId: 'nodeGroupId',\r\n        fetchMaxWaitMs: 1000,\r\n        fetchMaxBytes: 1024 * 1024\r\n    },\r\n    consumer = new ConsumerFacade('127.0.0.1:2181', 'UAVPositionTopic', options, specificSerializer),\r\n\r\n    testUAV =    {\r\n          id: 'debug123', \r\n          label: `${resources.ENTITY_TYPE_NAMES.HELICOPTER}: 001`,\r\n          position: {\r\n            longitude: resources.MAP_CENTER.longitude, \r\n            latitude: resources.MAP_CENTER.latitude, \r\n            height: 69.0\r\n          },\r\n          velocity:  {\r\n            longitude: -0.0002,\r\n            latitude: 0.001,\r\n            height: 250\r\n          }\r\n        };\r\n\r\nlet UAVData = {\r\n    timestamp: (new Date).getTime(),\r\n    id: testUAV.id,\r\n    type: resources.ENTITY_TYPE_NAMES.HELICOPTER,\r\n    longitude: testUAV.position.longitude,\r\n    latitude: testUAV.position.latitude,\r\n    height: testUAV.position.height\r\n}\r\n\r\nexport default class UAVPositionTest {\r\n\r\n    Subscribe (onMessage, onError) {\r\n        console.log(UAVData);\r\n        var onMessage = onMessage || (msg => console.log(msg)),\r\n        onError = onError || (msg => console.log(msg));\r\n    \r\n        consumer.subscribe(onMessage, onError);\r\n        setTimeout(() => consumer.close(() => process.exit()), 1 * 20 * 1000);\r\n    }\r\n\r\n    Start() {\r\n        producerPromise.then(producer =>\r\n        setInterval(() => {\r\n            UAVData.longitude += testUAV.velocity.longitude;\r\n            UAVData.latitude += testUAV.velocity.latitude;\r\n            UAVData.height += testUAV.velocity.height;        \r\n            producer.send('UAVPositionTopic', UAVData).catch(err => 'error: ' + console.log(err));\r\n        }, 1000));\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n"]}