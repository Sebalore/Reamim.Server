{"version":3,"sources":["../../../../src/utills/Kafka/test/reply.js"],"names":["requestSchema$","responseSchema$","avro","require","AvroSerializer","requestSchema","parse","serializer","responseSchema","deserializer","RequestResponseProducer","options","groupId","fetchMaxWaitMs","fetchMaxBytes","producerPromise","RequestResponseConsumer","consumerPromise","func","console","log","msg","arr","map","index","i","then","consumer","subscribe","setTimeout","close","process","exit","setInterval","producer","send","request","iter","length","forEach","promise","m","catch","err"],"mappings":"AAAA;;AACA,IAAMA,8LAAN;;AAWA,IAAMC,2LAAN;;AAWA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;AAAA,IACIC,iBAAiBD,QAAQ,qBAAR,CADrB;AAAA,IAEIE,gBAAgBH,KAAKI,KAAL,CAAWN,cAAX,CAFpB;AAAA,IAGIO,aAAa,IAAIH,cAAJ,CAAmBC,aAAnB,CAHjB;AAAA,IAKIG,iBAAiBN,KAAKI,KAAL,CAAWL,eAAX,CALrB;AAAA,IAMIQ,eAAe,IAAIL,cAAJ,CAAmBI,cAAnB,CANnB;AAAA,IAQIE,0BAA0BP,QAAQ,gCAAR,CAR9B;AAAA,IAUIQ,UAAU;AACNC,aAAS,mBADH;AAENC,oBAAgB,IAFV;AAGNC,mBAAe,OAAO;AAHhB,CAVd;AAAA,IAeIC,kBAAkB,IAAIL,uBAAJ,CAA4B,gBAA5B,EAA8CH,UAA9C,EAA0DE,YAA1D,EAAwEE,OAAxE,EAAiF,oBAAjF,CAftB;;AAgBI;;AAEAK,0BAA0Bb,QAAQ,gCAAR,CAlB9B;AAAA,IAoBIc,kBAAkB,IAAID,uBAAJ,CAA4B,gBAA5B,EAA8C,mBAA9C,EAAmEL,OAAnE,EAA4EJ,UAA5E,EAAwFE,YAAxF,CApBtB;;AAsBA,IAAIS,OAAO,SAAPA,IAAO,MAAO;AACdC,YAAQC,GAAR,CAAY,eAAeC,GAA3B;;AAEA,QAAIC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;AACA;AACA;;AAEA,WAAOA,IAAIC,GAAJ,CAAQ,aAAK;AAChB,eAAO;AACHC,mBAAOC;AADJ,SAAP;AAGH,KAJM,CAAP;AAKH,CAZD;;AAcAR,gBAAgBS,IAAhB,CAAqB,oBAAY;AAC7BC,aAASC,SAAT,CAAmBV,IAAnB;AACAW,eAAW;AAAA,eAAMF,SAASG,KAAT,CAAe;AAAA,mBAAMC,QAAQC,IAAR,EAAN;AAAA,SAAf,CAAN;AAAA,KAAX,EAAuD,MAAM,EAAN,GAAW,IAAlE;AACH,CAHD;;AAKAjB,gBAAgBW,IAAhB,CAAqB;AAAA,WACjBO,YAAY,YAAM;AACdC,iBAASC,IAAT,CAAc,mBAAd,EAAmC,EAACC,SAAS,gBAAV,EAAnC,EACKV,IADL,CACU,gBAAQ;AACVP,oBAAQC,GAAR,CAAY,aAAaiB,KAAKC,MAA9B;AACAD,iBAAKE,OAAL,CAAa;AAAA,uBAAWC,QAAQd,IAAR,CAAa;AAAA,2BAAKP,QAAQC,GAAR,CAAYqB,CAAZ,CAAL;AAAA,iBAAb,CAAX;AAAA,aAAb;AACH,SAJL,EAKKC,KALL,CAKW;AAAA,mBAAOvB,QAAQC,GAAR,CAAY,UAAUuB,GAAtB,CAAP;AAAA,SALX;AAMH,KAPD,EAOG,IAPH,CADiB;AAAA,CAArB;;AAUA","file":"reply.js","sourcesContent":["'use strict';\r\nconst requestSchema$ = `{\r\n      \"type\": \"record\",\r\n      \"name\": \"TestRequest\",\r\n      \"fields\": [\r\n        {\r\n          \"name\": \"request\",\r\n          \"type\": \"string\"\r\n        }\r\n      ]\r\n    }`;\r\n\r\nconst responseSchema$ = `{\r\n      \"type\": \"record\",\r\n      \"name\": \"TestResponse\",\r\n      \"fields\": [\r\n        {\r\n          \"name\": \"index\",\r\n          \"type\": \"int\"\r\n        }\r\n      ]\r\n    }`;\r\n\r\nvar avro = require('avsc'),\r\n    AvroSerializer = require('./../avroSerializer'),\r\n    requestSchema = avro.parse(requestSchema$),\r\n    serializer = new AvroSerializer(requestSchema),\r\n\r\n    responseSchema = avro.parse(responseSchema$),\r\n    deserializer = new AvroSerializer(responseSchema),\r\n\r\n    RequestResponseProducer = require('./../request_response/producer'),\r\n\r\n    options = {\r\n        groupId: 'REQRES_DEMO_GROUP',\r\n        fetchMaxWaitMs: 1000,\r\n        fetchMaxBytes: 1024 * 1024\r\n    },\r\n    producerPromise = new RequestResponseProducer('localhost:2181', serializer, deserializer, options, 'ReplyResponseTopic'),\r\n    //producerPromise1 = new RequestResponseProducer('localhost:2181', serializer, deserializer, options, 'ReplyResponseTopic1'),\r\n\r\n    RequestResponseConsumer = require('./../request_response/consumer'),\r\n\r\n    consumerPromise = new RequestResponseConsumer('localhost:2181', 'REQRES_DEMO_TOPIC', options, serializer, deserializer);\r\n\r\nvar func = msg => {\r\n    console.log(\"Handling: \" + msg);\r\n\r\n    let arr = [1, 2, 3];\r\n    //return [];\r\n    //throw 'boo';\r\n\r\n    return arr.map(i => {\r\n        return {\r\n            index: i\r\n        };\r\n    });\r\n}\r\n\r\nconsumerPromise.then(consumer => {\r\n    consumer.subscribe(func);\r\n    setTimeout(() => consumer.close(() => process.exit()), 0.5 * 60 * 1000);\r\n});\r\n\r\nproducerPromise.then(producer =>\r\n    setInterval(() => {\r\n        producer.send('REQRES_DEMO_TOPIC', {request: 'I am a request'})\r\n            .then(iter => {\r\n                console.log('length: ' + iter.length);\r\n                iter.forEach(promise => promise.then(m => console.log(m)));\r\n            })\r\n            .catch(err => console.log('err: ' + err));\r\n    }, 3000));\r\n\r\n/*producerPromise1.then(producer =>\r\n    setInterval(() => {\r\n        producer.send('REQRES_DEMO_TOPIC', {request: 'I am a request #1'})\r\n            .then(iter => console.log('I am a response #1'))\r\n            .catch(err => console.error(err));\r\n    }, 3000));*/\r\n\r\n\r\n\r\n"]}