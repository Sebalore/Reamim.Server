{"version":3,"sources":["../../../src/utills/Kafka/producerFacade.js"],"names":["kafka","require","HighLevelProducer","ProducerFacade","connectionString","serializer","highLevelProducer","Client","resolve","reject","producer","send","topic","message","buff","serialize","payloads","messages","cb","err","data","on","e"],"mappings":"AAAA;;;;;;;;;;;;;;;;AACA,IAAIA,QAAQC,QAAQ,YAAR,CAAZ;AAAA,IACIC,oBAAoBF,MAAME,iBAD9B;;IAGMC,c,GAEF,wBAAYC,gBAAZ,EAA8BC,UAA9B,EAA0C;AAAA;;AAEtC,QAAIC,oBAAoB,IAAIJ,iBAAJ,CAAsB,IAAIF,MAAMO,MAAV,CAAiBH,gBAAjB,CAAtB,CAAxB;;AAEA,WAAO,aAAY,UAACI,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,YAAIC,WAAW;AAEXC,gBAFW,gBAELC,KAFK,EAEEC,OAFF,EAEW;;AAElB,uBAAO,aAAY,UAACL,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIK,OAAOT,WAAWU,SAAX,CAAqBF,OAArB,CAAX;AAAA,wBACIG,WAAW,CACP,EAACJ,OAAOA,KAAR,EAAeK,UAAUH,IAAzB,EADO,CADf;AAAA,wBAIII,KAAK,SAALA,EAAK,CAACC,GAAD,EAAMC,IAAN;AAAA,+BAAeD,MAAMV,OAAOU,GAAP,CAAN,GAAoBX,QAAQY,IAAR,CAAnC;AAAA,qBAJT;;AAMAd,sCAAkBK,IAAlB,CAAuBK,QAAvB,EAAiCE,EAAjC;AACH,iBATM,CAAP;AAUH;AAdU,SAAf;;AAiBAZ,0BAAkBe,EAAlB,CAAqB,OAArB,EAA8B;AAAA,mBAAMb,QAAQE,QAAR,CAAN;AAAA,SAA9B;AACAJ,0BAAkBe,EAAlB,CAAqB,OAArB,EAA8B;AAAA,mBAAKZ,OAAOa,CAAP,CAAL;AAAA,SAA9B;AACH,KArBM,CAAP;AAsBH,C;;kBAGUnB,c","file":"producerFacade.js","sourcesContent":["'use strict';\r\nvar kafka = require('kafka-node'),\r\n    HighLevelProducer = kafka.HighLevelProducer;\r\n\r\nclass ProducerFacade {\r\n\r\n    constructor(connectionString, serializer) {\r\n\r\n        var highLevelProducer = new HighLevelProducer(new kafka.Client(connectionString));\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            var producer = {\r\n\r\n                send (topic, message) {\r\n\r\n                    return new Promise((resolve, reject) => {\r\n\r\n                        var buff = serializer.serialize(message),\r\n                            payloads = [\r\n                                {topic: topic, messages: buff}\r\n                            ],\r\n                            cb = (err, data) => err ? reject(err) : resolve(data);\r\n\r\n                        highLevelProducer.send(payloads, cb);\r\n                    });\r\n                }\r\n            };\r\n\r\n            highLevelProducer.on('ready', () => resolve(producer));\r\n            highLevelProducer.on('error', e => reject(e));\r\n        });\r\n    }\r\n}\r\n\r\nexport default ProducerFacade;"]}