{"version":3,"sources":["../../../src/utills/Kafka/avroSerializer.js"],"names":["avro","require","envelope$","envelopeSchema","parse","AvroSerializer","type","message","isValid","Error","toString","toBuffer","buff","fromBuffer"],"mappings":"AAAA;;;;;;;;;;;;;;;;AACA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;;AAEA,IAAMC,svBAAN;;AAaA,IAAMC,kBAAiBH,KAAKI,KAAL,CAAWF,SAAX,CAAvB;;IAEMG,c;AAEF,4BAAYC,IAAZ,CAAiB,wDAAjB,EAA2E;AAAA;;AACvE,aAAKA,IAAL,GAAYA,IAAZ;AACH;;;;kCAESC,O,EAAS;;AAEf,gBAAI,CAAC,KAAKD,IAAL,CAAUE,OAAV,CAAkBD,OAAlB,CAAL,EAAiC;AAC7B,sBAAME,MAAM,qCAAqC,KAAKH,IAAL,CAAUI,QAAV,EAA3C,CAAN;AACH;;AAED,mBAAO,KAAKJ,IAAL,CAAUK,QAAV,CAAmBJ,OAAnB,CAAP;AACH;;;oCAEWK,I,EAAM;AACd,mBAAO,KAAKN,IAAL,CAAUO,UAAV,CAAqBD,IAArB,CAAP;AACH;;;yCAEuB;AACpB,mBAAOT,eAAP;AACH;;;;;;kBAGUE,c","file":"avroSerializer.js","sourcesContent":["'use strict';\r\nvar avro = require('avsc');\r\n\r\nconst envelope$ = `{\r\n  \"namespace\": \"com.r39.avro\",\r\n  \"name\": \"KafkaRequestResponseEnvelope\",\r\n  \"type\": \"record\",\r\n  \"fields\": [\r\n    { \"name\": \"payload\", \"type\": \"bytes\", \"doc\": \"The actual message decoded into byte array.\" },\r\n    { \"name\": \"correlation_key\", \"type\": \"string\", \"doc\": \"A key which correlates a response to request.\" },\r\n    { \"name\": \"reply_topic\", \"type\": [\"null\", \"string\"], \"default\": null, \"doc\": \"Optional field. Provided only if this is a request message.\" },\r\n    { \"name\": \"exception\", \"type\": [\"null\", \"string\"], \"default\": null, \"doc\": \"Optional field. Response timeout or failure.\" },\r\n    { \"name\": \"total_messages\", \"type\": [\"null\", \"int\"], \"default\": null, \"doc\": \"Optional field. The total messages in the response.\" }\r\n  ]\r\n}`;\r\n\r\nconst envelopeSchema = avro.parse(envelope$);\r\n\r\nclass AvroSerializer {\r\n\r\n    constructor(type /*topic - TODO: schema registry lookup based on topic */) {\r\n        this.type = type;\r\n    }\r\n\r\n    serialize(message) {\r\n\r\n        if (!this.type.isValid(message)) {\r\n            throw Error('The message must conform schema:' + this.type.toString());\r\n        }\r\n\r\n        return this.type.toBuffer(message);\r\n    }\r\n\r\n    deserialize(buff) {\r\n        return this.type.fromBuffer(buff);\r\n    }\r\n\r\n    static envelopeSchema() {\r\n        return envelopeSchema;\r\n    }\r\n}\r\n\r\nexport default AvroSerializer;"]}