{"version":3,"sources":["../../../../src/utills/Kafka/request_response/completionMap.js"],"names":["AvroSerializer","require","ConsumerFacade","CompletionItem","UUID","defaultReplyTopic","randomUUID","CompletionMap","connectionString","deserializer","options","optionalReplyTopic","replyTopic","consumer","envelopeSchema","subscribe","completionHandler","envelope","console","log","err","completionMap","self","set","correlationKey","cb","item","key","correlation_key","has","completionItem","get","add","delete","close","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AACA,IAAIA,iBAAiBC,QAAQ,mBAAR,CAArB;AAAA,IACIC,iBAAiBD,QAAQ,mBAAR,CADrB;AAAA,IAEIE,iBAAiBF,QAAQ,kBAAR,CAFrB;AAAA,IAGIG,OAAOH,QAAQ,SAAR,CAHX;AAAA,IAIII,oBAAoB,iBAAiBD,KAAKE,UAAL,EAJzC;;IAMMC,a;AAEF,2BAAYC,gBAAZ,EAA8BC,YAA9B,EAA4CC,OAA5C,EAAqDC,kBAArD,EAAyE;AAAA;;AAAA;;AAErE,aAAKC,UAAL,GAAkBD,sBAAsBN,iBAAxC;;AAEA,YAAIQ,WAAW,IAAIX,cAAJ,CAAmBM,gBAAnB,EAAqC,KAAKI,UAA1C,EAAsDF,OAAtD,EAA+D,IAAIV,cAAJ,CAAmBA,eAAec,cAAf,EAAnB,CAA/D,CAAf;;AAEAD,iBAASE,SAAT,CAAmB;AAAA,mBAAY,MAAKC,iBAAL,CAAuBC,QAAvB,CAAZ;AAAA,SAAnB,EAAiE;AAAA,mBAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,SAAjE;;AAEA,aAAKC,aAAL,GAAqB,UAArB;;AAEA,YAAIC,OAAO,IAAX;;AAEA,eAAO;AAEHC,eAFG,eAECC,cAFD,EAEiBC,EAFjB,EAEqB;;AAEpB,oBAAIC,OAAO,IAAIvB,cAAJ,CAAmBsB,EAAnB,EAAuBhB,YAAvB,CAAX;;AAEAa,qBAAKD,aAAL,CAAmBE,GAAnB,CAAuBC,cAAvB,EAAuCE,IAAvC;AACH,aAPE;;;AASH,gBAAId,UAAJ,GAAiB;AACb,uBAAOU,KAAKV,UAAZ;AACH;AAXE,SAAP;AAaH;;;;0CAEiBK,Q,EAAU;AACxB,gBAAIU,MAAMV,SAASW,eAAnB;;AAEA,gBAAI,KAAKP,aAAL,CAAmBQ,GAAnB,CAAuBF,GAAvB,CAAJ,EAAiC;;AAE7B,oBAAIG,iBAAiB,KAAKT,aAAL,CAAmBU,GAAnB,CAAuBJ,GAAvB,CAArB;;AAEA,oBAAI,CAACG,eAAeE,GAAf,CAAmBf,QAAnB,CAAL,EAAmC;AAC/B,yBAAKI,aAAL,CAAmBY,MAAnB,CAA0BN,GAA1B;AACH;AACJ;AACJ;;;gCAEO;AACJ,iBAAKd,QAAL,CAAcqB,KAAd,CAAoB,YAAM,CACzB,CADD;AAEH;;;;;;AAGLC,OAAOC,OAAP,GAAiB7B,aAAjB","file":"completionMap.js","sourcesContent":["'use strict';\r\nvar AvroSerializer = require('../avroSerializer'),\r\n    ConsumerFacade = require('../consumerFacade'),\r\n    CompletionItem = require('./completionItem'),\r\n    UUID = require('../uuid'),\r\n    defaultReplyTopic = 'REPLY_TOPIC_' + UUID.randomUUID();\r\n\r\nclass CompletionMap {\r\n\r\n    constructor(connectionString, deserializer, options, optionalReplyTopic) {\r\n\r\n        this.replyTopic = optionalReplyTopic || defaultReplyTopic;\r\n\r\n        var consumer = new ConsumerFacade(connectionString, this.replyTopic, options, new AvroSerializer(AvroSerializer.envelopeSchema()));\r\n\r\n        consumer.subscribe(envelope => this.completionHandler(envelope), err => console.log(err));\r\n\r\n        this.completionMap = new Map();\r\n\r\n        var self = this;\r\n\r\n        return {\r\n\r\n            set(correlationKey, cb) {\r\n\r\n                let item = new CompletionItem(cb, deserializer);\r\n\r\n                self.completionMap.set(correlationKey, item);\r\n            },\r\n\r\n            get replyTopic() {\r\n                return self.replyTopic;\r\n            }\r\n        };\r\n    }\r\n\r\n    completionHandler(envelope) {\r\n        let key = envelope.correlation_key;\r\n\r\n        if (this.completionMap.has(key)) {\r\n\r\n            let completionItem = this.completionMap.get(key);\r\n\r\n            if (!completionItem.add(envelope)) {\r\n                this.completionMap.delete(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    close() {\r\n        this.consumer.close(() => {\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = CompletionMap;"]}