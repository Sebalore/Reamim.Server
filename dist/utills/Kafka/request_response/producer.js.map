{"version":3,"sources":["../../../../src/utills/Kafka/request_response/producer.js"],"names":["ProducerFacade","require","CompletionMap","AvroSerializer","UUID","RequestResponseProducer","connectionString","serializer","deserializer","options","optionalReplyTopic","producerPromise","envelopeSchema","completionMap","resolve","reject","then","send","topic","message","correlationKey","randomUUID","request","payload","serialize","correlation_key","reply_topic","replyTopic","exception","total_messages","cb","err","data","set","producer","close","catch","e","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AACA,IAAIA,iBAAiBC,QAAQ,mBAAR,CAArB;AAAA,IACIC,gBAAgBD,QAAQ,iBAAR,CADpB;AAAA,IAEIE,iBAAiBF,QAAQ,mBAAR,CAFrB;AAAA,IAGIG,OAAOH,QAAQ,SAAR,CAHX;;IAKMI,uB,GAEF,iCAAYC,gBAAZ,EAA8BC,UAA9B,EAA0CC,YAA1C,EAAwDC,OAAxD,EAAiEC,kBAAjE,EAAqF;AAAA;;AAEjF,QAAIC,kBAAkB,IAAIX,cAAJ,CAAmBM,gBAAnB,EAAqC,IAAIH,cAAJ,CAAmBA,eAAeS,cAAf,EAAnB,CAArC,CAAtB;AAAA,QACIC,gBAAgB,IAAIX,aAAJ,CAAkBI,gBAAlB,EAAoCE,YAApC,EAAkDC,OAAlD,EAA2DC,kBAA3D,CADpB;;AAGA,WAAO,aAAY,UAACI,OAAD,EAAUC,MAAV,EAAqB;;AAEpCJ,wBACKK,IADL,CACU;AAAA,mBAAYF,QACd;AACIG,oBADJ,gBACUC,KADV,EACiBC,OADjB,EAC0B;;AAElB,2BAAO,aAAY,UAACL,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,4BAAIK,iBAAiBhB,KAAKiB,UAAL,EAArB;AAAA,4BACIC,UAAU;AACNC,qCAAShB,WAAWiB,SAAX,CAAqBL,OAArB,CADH;AAENM,6CAAiBL,cAFX;AAGNM,yCAAab,cAAcc,UAHrB;AAINC,uCAAW,EAJL;AAKNC,4CAAgB,CAAC;AALX,yBADd;AAAA,4BAQIC,KAAK,SAALA,EAAK,CAACC,GAAD,EAAMC,IAAN;AAAA,mCAAeD,MAAMhB,OAAOgB,GAAP,CAAN,GAAoBjB,QAAQkB,IAAR,CAAnC;AAAA,yBART;;AAUAnB,sCAAcoB,GAAd,CAAkBb,cAAlB,EAAkCU,EAAlC;;AAEAI,iCAASjB,IAAT,CAAcC,KAAd,EAAqBI,OAArB;AACH,qBAfM,CAAP;AAgBH,iBAnBL;AAqBIa,qBArBJ,mBAqBY;AACJtB,kCAAcsB,KAAd;AACH;AAvBL,aADc,CAAZ;AAAA,SADV,EA2BKC,KA3BL,CA2BW;AAAA,mBAAKrB,OAAOsB,CAAP,CAAL;AAAA,SA3BX;AA4BH,KA9BM,CAAP;AA+BH,C;;AAGLC,OAAOC,OAAP,GAAiBlC,uBAAjB","file":"producer.js","sourcesContent":["'use strict';\r\nvar ProducerFacade = require('../producerFacade'),\r\n    CompletionMap = require('./completionMap'),\r\n    AvroSerializer = require('../avroSerializer'),\r\n    UUID = require('../uuid');\r\n\r\nclass RequestResponseProducer {\r\n\r\n    constructor(connectionString, serializer, deserializer, options, optionalReplyTopic) {\r\n\r\n        var producerPromise = new ProducerFacade(connectionString, new AvroSerializer(AvroSerializer.envelopeSchema())),\r\n            completionMap = new CompletionMap(connectionString, deserializer, options, optionalReplyTopic);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            producerPromise\r\n                .then(producer => resolve(\r\n                    {\r\n                        send (topic, message) {\r\n\r\n                            return new Promise((resolve, reject) => {\r\n\r\n                                var correlationKey = UUID.randomUUID(),\r\n                                    request = {\r\n                                        payload: serializer.serialize(message),\r\n                                        correlation_key: correlationKey,\r\n                                        reply_topic: completionMap.replyTopic,\r\n                                        exception: '',\r\n                                        total_messages: -1\r\n                                    },\r\n                                    cb = (err, data) => err ? reject(err) : resolve(data);\r\n\r\n                                completionMap.set(correlationKey, cb);\r\n\r\n                                producer.send(topic, request);\r\n                            });\r\n                        },\r\n\r\n                        close() {\r\n                            completionMap.close();\r\n                        }\r\n                    }))\r\n                .catch(e => reject(e));\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = RequestResponseProducer;"]}