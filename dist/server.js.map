{"version":3,"sources":["../src/server.js"],"names":["config","express","bodyParser","cookieParser","http","socketIO","initialViewState","resources","UAVPositionTest","port","process","env","PORT","app","server","Server","io","listen","console","log","on","socket","Start","onMessage","JSON","parse","msg","id","type","longitude","latitude","height","emit","ACTIONS","UPDATE_POSITION","TYPE","agent","AGENTS","API","data","entityTypeName","position","Subscribe","dir"],"mappings":"AAAA;AACA;AACA;;;;;;AACA;;IAAOA,M;;AACP;;IAAOC,O;;AACP;;IAAOC,U;;AACP;;IAAOC,Y;;AACP;;IAAOC,I;;AACP;;IAAOC,Q;;AAIP;;IAAOC,gB;;AACP;;IAAOC,S;;AAEP;;IAAOC,e;;;;AAIP;AACA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBZ,OAAOS,IAAxC;AAXA;AACA;;AAWA,IAAMI,MAAMZ,SAAZ;AACA,IAAMa,SAASV,KAAKW,MAAL,CAAYF,GAAZ,CAAf;AACA,IAAMG,KAAKX,SAASS,MAAT,CAAX;;AAEA;AACAA,OAAOG,MAAP,CAAcR,IAAd;AACAS,QAAQC,GAAR,CAAY,4BAA4BV,IAAxC;;AAGAO,GAAGI,EAAH,CAAM,YAAN,EAAoB,UAAUC,MAAV,EAAkB;;AAEpCH,UAAQC,GAAR,CAAY,gBAAeX,eAAf,CAAZ;AACAA,kBAAgBc,KAAhB;;AAEA,MAAIC,YAAY,SAAZA,SAAY,MAAO;AAAA,sBAC6BC,KAAKC,KAAL,CAAWC,GAAX,CAD7B;AAAA,QACbC,EADa,eACbA,EADa;AAAA,QACTC,IADS,eACTA,IADS;AAAA,QACHC,SADG,eACHA,SADG;AAAA,QACQC,QADR,eACQA,QADR;AAAA,QACkBC,MADlB,eACkBA,MADlB;;AAErBV,WAAOW,IAAP,CAAY,QAAZ,EAAsB;AACpBJ,YAAMrB,UAAU0B,OAAV,CAAkBC,eAAlB,CAAkCC,IADpB;AAEpBC,aAAO7B,UAAU8B,MAAV,CAAiBC,GAFJ;AAGpBC,YAAM;AACFC,wBAAgBZ,IADd;AAEFD,YAAIA,EAFF;AAGFc,kBAAU,EAAEZ,oBAAF,EAAaC,kBAAb,EAAuBC,cAAvB;AAHR;AAHc,KAAtB;AASD,GAXD;;AAaAvB,kBAAgBkC,SAAhB;;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACErB,SAAOD,EAAP,CAAU,KAAV,EAAiB,UAAUmB,IAAV,EAAgB;AAC/BrB,YAAQC,GAAR,CAAY,kBAAZ;AACAD,YAAQyB,GAAR,CAAYJ,IAAZ;AACA;AACD,GAJD;AAKD,CA5DD;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA","file":"server.js","sourcesContent":["// server.js\r\n'use strict';\r\n// declare imports [packages]\r\nimport config from './config.json';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport http from 'http';\r\nimport socketIO from 'socket.io';\r\n//import session from 'express-session';\r\n//imoprt cors from 'cors';\r\n\r\nimport initialViewState from './data/storeIntialState';\r\nimport resources from './data/resources';\r\n\r\nimport UAVPositionTest from './utills/Kafka/test/UAVPositionTest';\r\n\r\n\r\n\r\n// declare general variables \r\nconst port = process.env.PORT || config.port;\r\nconst app = express();\r\nconst server = http.Server(app);\r\nconst io = socketIO(server);\r\n\r\n// start the server\r\nserver.listen(port);\r\nconsole.log('Server is listening to ' + port);\r\n\r\n\r\nio.on('connection', function (socket) {\r\n\r\n  console.log(JSON.stringify(UAVPositionTest));\r\n  UAVPositionTest.Start();\r\n\r\n  let onMessage = msg => {\r\n    const { id, type, longitude, latitude, height } = JSON.parse(msg);\r\n    socket.emit('ACTION', { \r\n      type: resources.ACTIONS.UPDATE_POSITION.TYPE,\r\n      agent: resources.AGENTS.API,\r\n      data: {\r\n          entityTypeName: type,\r\n          id: id,\r\n          position: { longitude, latitude, height}\r\n      }                              \r\n    });     \r\n  };\r\n\r\n  UAVPositionTest.Subscribe();\r\n\r\n  //---- add all initial entities\r\n    // initialViewState.entityTypes\r\n    //   .forEach(entityType => entityType.entities.filter(e => e.id==='debug111').forEach(e =>\r\n    //           socket.emit('ACTION', { \r\n    //             type: resources.ACTIONS.ADD.TYPE,\r\n    //             agent: resources.AGENTS.API,\r\n    //             data: {\r\n    //                 entityTypeName: entityType.name,\r\n    //                 id: e.id,\r\n    //                 position: e.position,\r\n    //                 label: `${entityType.name}-${e.id}`\r\n    //             }\r\n    //   })));\r\n  \r\n  //---- simulation of periodic notification of UAV positions\r\n  // initialViewState.entityTypes\r\n  //   .filter(entityType => [resources.ENTITY_TYPE_NAMES.AIRPLANE, resources.ENTITY_TYPE_NAMES.HELICOPTER].includes(entityType.name))\r\n  //     .forEach(entityType => entityType.entities.filter(e => e.id==='debug111').forEach(e =>{\r\n  //       const gen = e.gen(e.position);\r\n  //       setInterval(() => {\r\n  //         const cords = gen.next();\r\n  //           if(!cords.done) {\r\n  //             socket.emit('ACTION', { \r\n  //               type: resources.ACTIONS.UPDATE_POSITION.TYPE,\r\n  //               agent: resources.AGENTS.API,\r\n  //               data: {\r\n  //                   entityTypeName: entityType.name,\r\n  //                   id: e.id,\r\n  //                   position: cords.value\r\n  //               }                              \r\n  //             });                \r\n  //           }\r\n  //       }, 5000)}));\r\n\r\n//----- simulation of publishing changes made by client\r\n  socket.on('ADD', function (data) {\r\n    console.log('New entity added');\r\n    console.dir(data);\r\n    //TODO: publish on Kafka\r\n  });\r\n});\r\n\r\n// //  define middleware [add to the middleware stack the operations done when routing]\r\n// app.use(bodyParser.urlencoded({extended: true}));\r\n// app.use(bodyParser.json({\r\n// \tlimit : config.bodyLimit\r\n// }));\r\n// app.use(cookieParser());\r\n// //app.use(cors());\r\n// app.use(function (req, res, next) {\r\n//   res.header('Access-Control-Allow-Origin', '*');\r\n//   res.header('Access-Control-Allow-Methods',  'GET, POST, PUT, DELETE, OPTIONS');\r\n//   res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n//   next();\r\n// });\r\n\r\n\r\n// declare routes\r\n//import layersRouter from './routes/layersRouter';\r\n// // register routes\r\n// app.use('/api', layersRouter);\r\n// // app.use('/users', usersRouter);\r\n\r\n\r\n\r\n// start the server\r\n// app.listen(port);\r\n// console.log('Server is listening to ' + port);\r\n"]}